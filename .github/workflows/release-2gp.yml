name: Release 2GP

on:
  workflow_call:
    secrets:
      dev-hub-auth-url:
        required: true
      gh-email:
        required: true
      github-token:
        required: true
      pkg-ver-auth:
        required: true
      pkg-ver-url:
        required: true

jobs:
  beta-test:
    name: "Release 2GP"
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/clearrisk/d2x:latest
      options: --user root
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github-token }}
      env:
        DEV_HUB_AUTH_URL: "${{ secrets.dev-hub-auth-url }}"
        CUMULUSCI_SERVICE_github: '{ "username": "${{ github.actor }}", "token": "${{ secrets.github-token }}", "email": "${{ secrets.gh-email }}" }'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "main"

      - name: debug
        run: |
          echo "Tag name from GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "Tag name from github.ref_name: ${{  github.ref_name }}"

      - name: Install pwgen and jq
        run: |
          apt-get update
          apt-get install -y pwgen jq

      - name: Add install key to env
        run: echo "CR_PKG_KEY=c5453a48ab3d0739d82b9038bbaae045" >> $GITHUB_ENV

      - name: Auth to DevHub
        run: /usr/local/bin/devhub.sh

      - name: Set Default Org Type
        run: cci org scratch release release

      - name: Set default org
        run: cci org default release

      - name: Put API url in env
        run: echo "PKG_API_URL=${{ secrets.pkg-ver-url }}" >> $GITHUB_ENV

      - name: Put API auth in env
        run: echo "PKG_API_AUTH=${{ secrets.pkg-ver-auth }}" >> $GITHUB_ENV

      # - name: Generate deps.txt
      #   run: echo n | cci task run update_dependencies --interactive True --org release | tee deps.txt

      # - name: Get Auth keys
      #   run: curl -G "${{ env.PKG_API_URL }}keys?auth-token=${{ env.PKG_API_AUTH }}" --data-urlencode "input=$(cat deps.txt)" | tee $GITHUB_ENV

      - name: Install Dependencies for Resolution
        run: cci flow run dependencies

      # - name: Promote Latest Beta (will fail)
      #   run: cci flow run release_2gp_production-o promote_package_version__install_key fafa | grep "Resolved to version:" | tee failed.txt
      #   continue-on-error: true
      #   shell: bash

      - name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Promote Latest Beta (will not fail)
        run: cci flow run release_2gp_production | tee release2gp.txt
        shell: bash

      - name: Run Release Test
        run: cci flow run ci_release -o install_managed__password ${{ env.PKG_INSTALL_KEY }}

      - name: Delete Scratch Org
        if: ${{ always() }}
        run: |
          cci org scratch_delete release
        shell: bash
